{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc, collection } from 'firebase/firestore'; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBRScMgh8MERBsSlkrk8lGaZwHdDadWh-k\",\n  authDomain: \"e-commerce-e7068.firebaseapp.com\",\n  projectId: \"e-commerce-e7068\",\n  storageBucket: \"e-commerce-e7068.appspot.com\",\n  messagingSenderId: \"133939913194\",\n  appId: \"1:133939913194:web:8818ac0f70bd0e1902d293\"\n}; // Initialize Firebase\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const dbase = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  const userDocRef = doc(dbase, 'users', userAuth.uid); //users is the collection\n\n  console.log(userDocRef); // google creates an object to store user/uid and store more data\n\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot); // check if user data exists\n  // if user doesn't exist\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log('error creating the user ', error.message);\n    }\n  } // if user data exists\n\n\n  return userDocRef; // create or set the document with the data from userAuth in my collection\n  // return userDocRef\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","getFirestore","doc","getDoc","setDoc","collection","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","dbase","createUserDocumentFromAuth","userAuth","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","error","message"],"sources":["/Users/miali/Documents/Mia/Udemy/react_projects/e-commerce-fashion/src/utils/firebase/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport {\n    getFirestore,\n    doc,\n    getDoc,\n    setDoc,\n    collection\n} from 'firebase/firestore';\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBRScMgh8MERBsSlkrk8lGaZwHdDadWh-k\",\n  authDomain: \"e-commerce-e7068.firebaseapp.com\",\n  projectId: \"e-commerce-e7068\",\n  storageBucket: \"e-commerce-e7068.appspot.com\",\n  messagingSenderId: \"133939913194\",\n  appId: \"1:133939913194:web:8818ac0f70bd0e1902d293\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n    prompt: \"select_account\"\n});\n\n\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\nexport const dbase = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n    const userDocRef = doc(dbase, 'users', userAuth.uid); //users is the collection\n    console.log(userDocRef); // google creates an object to store user/uid and store more data\n    const userSnapshot = await getDoc(userDocRef);\n    console.log(userSnapshot);\n\n    // check if user data exists\n\n    // if user doesn't exist\n    if(!userSnapshot.exists()){\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n        try{\n            await setDoc(userDocRef, {\n                displayName,\n                email,\n                createdAt\n            });\n        } catch(error) {\n            console.log('error creating the user ', error.message);\n        }\n    }\n\n    // if user data exists\n\n    return userDocRef;\n\n    // create or set the document with the data from userAuth in my collection\n\n    // return userDocRef\n\n}"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,OAAT,EAAkBC,kBAAlB,EAAsCC,eAAtC,EAAuDC,kBAAvD,QAAiF,eAAjF;AACA,SACIC,YADJ,EAEIC,GAFJ,EAGIC,MAHJ,EAIIC,MAJJ,EAKIC,UALJ,QAMO,oBANP,C,CASA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,kCAFS;EAGrBC,SAAS,EAAE,kBAHU;EAIrBC,aAAa,EAAE,8BAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE;AANc,CAAvB,C,CASA;;AACA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAD,CAAjC;AAEA,MAAMQ,QAAQ,GAAG,IAAId,kBAAJ,EAAjB;AACAc,QAAQ,CAACC,mBAAT,CAA6B;EACzBC,MAAM,EAAE;AADiB,CAA7B;AAMA,OAAO,MAAMC,IAAI,GAAGpB,OAAO,EAApB;AACP,OAAO,MAAMqB,qBAAqB,GAAG,MAAMnB,eAAe,CAACkB,IAAD,EAAOH,QAAP,CAAnD;AAEP,OAAO,MAAMK,KAAK,GAAGlB,YAAY,EAA1B;AAEP,OAAO,MAAMmB,0BAA0B,GAAG,MAAOC,QAAP,IAAoB;EAC1D,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,KAAD,EAAQ,OAAR,EAAiBE,QAAQ,CAACE,GAA1B,CAAtB,CAD0D,CACJ;;EACtDC,OAAO,CAACC,GAAR,CAAYH,UAAZ,EAF0D,CAEjC;;EACzB,MAAMI,YAAY,GAAG,MAAMvB,MAAM,CAACmB,UAAD,CAAjC;EACAE,OAAO,CAACC,GAAR,CAAYC,YAAZ,EAJ0D,CAM1D;EAEA;;EACA,IAAG,CAACA,YAAY,CAACC,MAAb,EAAJ,EAA0B;IACtB,MAAM;MAACC,WAAD;MAAcC;IAAd,IAAuBR,QAA7B;IACA,MAAMS,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IACA,IAAG;MACC,MAAM3B,MAAM,CAACkB,UAAD,EAAa;QACrBM,WADqB;QAErBC,KAFqB;QAGrBC;MAHqB,CAAb,CAAZ;IAKH,CAND,CAME,OAAME,KAAN,EAAa;MACXR,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCO,KAAK,CAACC,OAA9C;IACH;EACJ,CArByD,CAuB1D;;;EAEA,OAAOX,UAAP,CAzB0D,CA2B1D;EAEA;AAEH,CA/BM"},"metadata":{},"sourceType":"module"}